set(CTEST_PROJECT_NAME libtsm)

set(CTEST_SOURCE_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})
set(CTEST_BINARY_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/build/ctest")

set(CTEST_CMAKE_GENERATOR "Unix Makefiles")

set(ENV{CK_FORK} "no")
find_program(VALGRIND valgrind)
if(NOT VALGRIND)
    message(FATAL_ERROR "valgrind is required for memcheck")
endif()
set(CTEST_MEMORYCHECK_COMMAND "${VALGRIND}")
string(CONCAT CTEST_MEMORYCHECK_COMMAND_OPTIONS
    " --tool=memcheck"
    " --leak-check=yes"
    " --show-reachable=yes"
    " --leak-resolution=high"
    " --error-exitcode=1"
)
set(CTEST_MEMORYCHECK_SUPPRESSIONS_FILE "${CTEST_SOURCE_DIRECTORY}/etc/test.supp")

ctest_start("Continuous")

ctest_configure(OPTIONS "-DBUILD_TESTING=ON;-DBUILD_GTKTSM=ON" RETURN_VALUE ret)
if(NOT ${ret} EQUAL 0)
    message(FATAL_ERROR "Configure step failed with ${ret}")
endif()

ctest_build(RETURN_VALUE ret)
if(NOT ${ret} EQUAL 0)
    message(FATAL_ERROR "Build step failed with ${ret}")
endif()

ctest_test(RETURN_VALUE ret)
if(NOT ${ret} EQUAL 0)
    message(FATAL_ERROR "Test step failed with ${ret}")
endif()

# First make sure valgrind works
ctest_memcheck(INCLUDE_LABEL "memcheck-xfail" RETURN_VALUE ret)
if(${ret} EQUAL 0)
    message(FATAL_ERROR "Valgrind may not work correctly. Expected failed test got passed.")
endif()

ctest_memcheck(EXCLUDE_LABEL "memcheck-xfail" RETURN_VALUE ret)
if(NOT ${ret} EQUAL 0)
    message(FATAL_ERROR "Memcheck step failed with ${ret}")
endif()
